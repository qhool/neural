#!/usr/bin/perl -w
use strict;

use Data::Dumper;
use IO::File;
use Storable qw(fd_retrieve);
use Statistics::Regression;

my @complexity_map = (0,1.5,1.5,1,1.5,1,1.5,1,2,1.5,1.5,2,1,1.5,1,1.5,1.5,0);

for my $logf (@ARGV) {
  my $fh = new IO::Handle;
  open $fh, "<$logf" or die "Can't open $logf: $!";
  my $hdr_dat = fd_retrieve( $fh );
  my $proj_def = $hdr_dat->{project_def};
  #print Data::Dumper::Dumper( $proj_def );
  my @ent;

  while( not eof( $fh ) ) {
    my $dat = fd_retrieve( $fh );
    #print Data::Dumper::Dumper( $dat );
    push @ent, $dat;
  }

  unless( @ent ) {
    print STDERR "$0: $logf has 0 records: skipping.\n";
    next;
  }
  #fields 1,2,3,
  my @outfld = @$proj_def{qw(introns recompile_genome remove_introns) }; #);

  my $opt_bmp = (defined($proj_def->{introns})?1:0) +
    (($proj_def->{recompile_genome})?4:0) +
      (($proj_def->{remove_introns})?2:0);
  #field 4
  push @outfld, $opt_bmp;
  
  #field 5
  push @outfld, $proj_def->{mutation_level};

  my $skip = 1;

  #fields 6,7,8,9
  push @outfld,
    ( avg_and_norm( { field => 'ret_avg_fitness', skip => $skip }, @ent ) );
  #fields 10,11,12,13
  push @outfld,
    ( avg_and_norm( { field => 'new_avg_fitness', skip => $skip }, @ent ) );
  #fields 14,15,16,17
  push @outfld,
    ( avg_and_norm( { field => 'avg_fitness', skip => $skip }, @ent ) );
  my $slope =
    get_slope ( { field => 'ret_avg_fitness', skip => $skip }, @ent );
  #field 18
  push @outfld, $slope;
  #fields 19,20,21,22,23,24,25
  push @outfld,
    ( track_jumps( { field => 'ret_avg_fitness', skip => $skip,
		     window => 5, slope => $slope, factors => [2,3,5,10] },
		   @ent ) );
  #fields 26,27,28,29,30,31,32
  push @outfld,
    ( track_jumps( { field => 'ret_avg_fitness', skip => $skip,
		     window => 10, slope => $slope, factors => [2,3,5,10] },
		   @ent ) );
  #fields 33,34,35,36,37,38,39
  push @outfld,
    ( track_jumps( { field => 'ret_avg_fitness', skip => $skip,
		     window => 20, slope => $slope, factors => [2,3,5,10] },
		   @ent ) );
  #fields 40,41,42,43,44,45,46
  push @outfld,
    ( track_jumps( { field => 'ret_avg_fitness', skip => $skip,
		     window => 50, slope => $slope, factors => [2,3,5,10] },
		   @ent ) );
  #fields 47,48,49 and 50,51,52
  if( $logf =~ /bigproj_[abc]_(\d+)_(\d+)_(\d+)/ ) {
    my $probnum = $3;
    my $n_in = $1;
    my $arr = $2;
    push @outfld, ($probnum, $n_in, $arr);
    #figure out complexity:
    my @bits = split( "", unpack( "b*", pack( "V", $probnum ) ) );
    my $a_complex = $complexity_map[unpack( "v", pack( "b*", join( "", @bits[0,2,4,6,8..19] ) ) )];
    my $b_complex = $complexity_map[unpack( "v", pack( "b*", join( "", @bits[1,3,5,7,9..20] ) ) )];
    my $combo_complex = $a_complex + $b_complex;
    push @outfld, ($a_complex, $b_complex, $combo_complex );
  } else {
    print STDERR "?:: $logf\n";
  }


  print join( "\t", @outfld ), "\n";
}


sub avg_and_norm {
  my $args = shift;
  my $field = $args->{field};
  my $nskip = $args->{skip};
  my $n = 0;
  my( $min, $max );
  my $sum = 0;
  for my $datum (@_) {
    if( $nskip ) {
      $nskip--;
      next;
    }
    my $val = $datum->{$field};
    $min = $val unless defined $min and $min < $val;
    $max = $val unless defined $max and $max > $val;
    $sum += $val;
    $n++;
  }
  unless( $n ) {
    return (0,0,0,0);
  }
  #compute the sum if all vals are scaled so min=0 & max=1:
  my $scaled_sum = 0;
  unless( $max == 0 ) {
    $scaled_sum = ($sum - $n * $min)/$max;
  }
  return ( $min, $max, $sum/$n, $scaled_sum/$n );
}


sub get_slope {
  my $args = shift;
  my $field = $args->{field};
  my $nskip = $args->{skip};
  my @ent = @_;

  return 0 unless $#ent > $nskip;

  my $reg = Statistics::Regression->new( 2, "regression",
					 [ "const", "X" ] );

  for my $i ($nskip..$#ent) {
    if( defined( $ent[$i]->{$field} ) ) {
      $reg->include( $ent[$i]->{$field}, [ 1.0, $i - $nskip ] );
    }
  }
  my( $intercept, $slope ) = $reg->theta;
  return $slope;
}

sub track_jumps {
  my $args = shift;
  my $field = $args->{field};
  my $nskip = $args->{skip};
  my $window = $args->{window};
  my $slope = $args->{slope};
  my @nx_factors = @{$args->{factors}};

  my @ent = @_;

  return 0 unless $#ent > ($window+$nskip);
  return 0 unless $slope > 0;

  my @last_nx = (0) x (@nx_factors + 0);
  my @nx = (0) x (@nx_factors + 0);

  my $max_jump = 0;

  for my $x ($window+$nskip..$#ent) {
    my $trl_x = $x - $window;
    my $val = $ent[$x]->{$field};
    my $trl_val = $ent[$trl_x]->{$field};
    my $jump = $val - $trl_val;
    if( $jump > $max_jump ) {
      $max_jump = $jump;
    }
    my $jump_ratio = ($jump/$window)/$slope;
    for my $i (0..$#nx_factors) {
      if( $trl_x >= $last_nx[$i] and #non overlapping windows
	  $jump_ratio > $nx_factors[$i] ) {
	$nx[$i]++;
	$last_nx[$i] = $x; #windows can touch, just not overlap
      }
    }
  }
  return $max_jump, $max_jump/$window, ($max_jump/$window)/$slope, @nx;
}
